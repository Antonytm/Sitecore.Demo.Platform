param(
    [string] $nugetPath = ".\tools\nuget.exe",
    [string] $sourcePath = "C:\\inetpub\\wwwroot\\CommerceAuthoring_habitat",
    [string] $outputPath = "C:\\LocalNuGet\\Generated",
    [string] $nuspecTemplate = ".\tools\package.nuspec.xml"
)
function Publish-NugetPackageFromWebsiteBin(
    [string] $nugetPath,
    [string] $sourcePath,
    [string] $outputPath,
    [string] $nuspecTemplate) {
    $nugetPath = Resolve-Path $nugetPath
    $nuspecTemplate = Resolve-Path $nuspecTemplate
    $updateText = "Update 2"
    $description = ("Sitecore Commerce Engine {0} Preview Release" -f $updateText)
    # clean-up
    $output = New-Item -ItemType Directory -Path ($outputPath + "\" + [System.Guid]::NewGuid())
    Write-Output 'Output is ' + $outputPath

    Get-ChildItem $sourcePath |
        Where-Object {$_.Name -match "^Sitecore.*\.dll$"} | 
        Foreach-Object { Write-Host $_.FullName
        $productVersion = [System.Diagnostics.FileVersionInfo]::GetVersionInfo($_.Fullname).ProductVersion.ToString(); 
        Write-Host $productVersion
        Publish-NugetPackageFromDLL $sourcePath $_.Name $output.FullName $description $productVersion $nugetPath $nuspecTemplate 
    }
}
     
function Publish-NugetPackageFromDLL(
    $sourcePath, $assemblyName, $output, $description, $productVersion, $nugetPath, $nuspecTemplate) {
    $tempPath = $output + "\tmp"
    # dlls
    $file = Get-Item "$sourcePath\$assemblyName"
    $id = [System.IO.Path]::GetFileNameWithoutExtension($file) #+ ".NoReferences"
    $framework = Get-FrameworkVersion($file)
    # create package directory
    $tmpFolder = New-Item $tempPath -type directory -Force
    $packageFolder = New-Item "$tmpFolder\$id" -type directory -Force
    $libsFolder = New-Item "$packageFolder\lib" -type directory -Force
    $frameworkFolder = New-Item "$libsFolder\$framework" -type directory -Force
    # packages
    $nuspec = New-Nuspec $file $binPath $nuspecTemplate $id $productVersion $description $framework $packageFolder
    # write files
    Copy-Item $file $frameworkFolder -Force
    $assemblyXml = "$sourcePath\$id.xml"
    if (Test-Path $assemblyXml) {
        Copy-Item $assemblyXml $frameworkFolder -Force
    }
    $assemblyPub = "$sourcePath\$id.pub"
    if (Test-Path $assemblyPub) {
        Copy-Item $assemblyPub $frameworkFolder -Force
    }

    $output = New-Item "$output\packages" -type directory -Force
    & $nugetPath pack $tempPath\$Id\$Id.nuspec -OutputDirectory $output
}

function New-Nuspec(
    $assemblyFile,
    [string] $sourcePath,
    [string] $nuspecTemplate,
    [string] $packageId,
    [string] $packageVerison,
    [string] $packageDescription,
    [string] $packageFramework,
    [string] $output
) {
    $xml = [xml](Get-Content $nuspecTemplate)
    # Set ID
    $node = $xml.package.metadata
    $node.ID = $packageId
    $node.title = $packageId
    $node.version = $packageVerison
    $node.description = "Autogenerated NuGet package from $packageDescription"
    $node.summary = "Summary : " + $packageId + "."
    $files = $xml.CreateElement('files');
    $file = $xml.CreateElement('file');
  
    Write-Output "Bin Path " $sourcePath
    Write-Output "AssemblyPath " $assemblyFile
    $assemblyPath = "lib\NET462\" + $assemblyFile.Name;
    $file.SetAttribute('src', $assemblyPath ); 
    $file.SetAttribute('target', $assemblyPath );
    $files.AppendChild($file);
    $xml.package.AppendChild($files);
    $xml.Save("$output\$packageId.nuspec")
    return Get-Item "$output\$packageId.nuspec"
}

function Get-FrameworkVersion([string] $path) {
    # $imageRuntimeVersion = [System.Reflection.Assembly]::LoadFrom($path).ImageRuntimeVersion.ToString()
    # if ($imageRuntimeVersion.Contains("v4.5")) {
    #     return "net45"
    # }
    return "NET462"
}

Publish-NugetPackageFromWebsiteBin $nugetPath $sourcePath $outputPath $nuspecTemplate