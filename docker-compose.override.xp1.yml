version: "2.4"

services:

  traefik:
    healthcheck:
      test: ["CMD", "powershell", "ps"]
    volumes:
      - ./data/traefik:C:/etc/traefik
  id:
    healthcheck:
      test: ["CMD", "powershell", "ps"]
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\license.xml

  cortexprocessing:
    healthcheck:
      test: ["CMD", "powershell", "ps"]
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\

  cortexreporting:
    healthcheck:
      test: ["CMD", "powershell", "ps"]
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\

  xdbrefdata:
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\

  xdbsearchworker:
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\

  xdbautomationworker:
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\

  cortexprocessingworker:
    healthcheck:
      test: ["CMD", "powershell", "ps"]
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\

  mssql:
    healthcheck:
      test: ["CMD", "powershell", "ps"]
    image: ${REGISTRY}demo/lighthouse-mssql:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    build:
      context: .
      dockerfile: .\docker\images\windows\demo-sqldev\dockerfile
      args:
        BUILD_IMAGE: ${REGISTRY}demo/base/demo-build-sdk:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}
        BASE_IMAGE: ${REGISTRY}demo/base/lighthouse-xp1-modules-base-mssql:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}
        INTERNAL_NUGET_SOURCE: ${INTERNAL_NUGET_SOURCE}
        SYSTEM_ACCESSTOKEN: ${SYSTEM_ACCESSTOKEN}
    environment:
      USER_PASSWORD: ${SITECORE_ADMIN_PASSWORD}
      ADMIN_USER_NAME: "sitecore\\superuser"
      DISABLE_DEFAULT_ADMIN: 'FALSE'
      EXM_BASE_URL: "https://${CD_HOST}"
      DAM_URL: ${DAM_URL}
    mem_limit: 2GB
    volumes:
      - type: bind
        source: .\data\sql
        target: c:\data

  solr:
    healthcheck:
      test: ["CMD", "powershell", "ps"]
    image: ${REGISTRY}demo/lighthouse-solr:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    build:
      context: .
      dockerfile: .\docker\images\windows\demo-solr\dockerfile
      args:
        BASE_IMAGE: ${REGISTRY}community/sitecore-xp1-custom-sxa-solr:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}
    mem_limit: 1GB
    volumes:
      - type: bind
        source: .\data\solr
        target: c:\data

  ps:
    healthcheck:
      test: ["CMD", "powershell", "ps"]
    image: ${REGISTRY}demo/lighthouse-ps:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    isolation: ${ISOLATION}
    build:
      context: .
      dockerfile: .\docker\images\windows\demo-ps\dockerfile
      args:
        BASE_IMAGE: ${REGISTRY}community/sitecore-custom-ps:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}
    restart: unless-stopped
    environment:
      CONN_STRING_CORE: Data Source=mssql;Initial Catalog=Sitecore.Core;User ID=sa;Password=${SQL_SA_PASSWORD}
      CONN_STRING_MASTER: Data Source=mssql;Initial Catalog=Sitecore.Master;User ID=sa;Password=${SQL_SA_PASSWORD}
      CONN_STRING_WEB: Data Source=mssql;Initial Catalog=Sitecore.Web;User ID=sa;Password=${SQL_SA_PASSWORD}
    depends_on:
      mssql:
        condition: service_healthy
    ports:
      - "44015:80"

  cd:
    healthcheck:
      test: ["CMD", "powershell", "ps"]
    image: ${REGISTRY}demo/lighthouse-cd:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    build:
      context: .
      dockerfile: .\docker\images\windows\demo-cd\dockerfile
      args:
        BUILD_IMAGE: ${REGISTRY}demo/base/demo-build-sdk:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}
        BASE_IMAGE: ${REGISTRY}demo/base/lighthouse-xp1-modules-base-cd:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}
        ASSETS_IMAGE: ${SITECORE_DOCKER_REGISTRY}tools/sitecore-docker-tools-assets:${SITECORE_VERSION}-${NANOSERVER_VERSION}
        INTERNAL_NUGET_SOURCE: ${INTERNAL_NUGET_SOURCE}
        SYSTEM_ACCESSTOKEN: ${SYSTEM_ACCESSTOKEN}
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\license.xml
      SITECORE_APPSETTINGS_ROLE:DEFINE: ContentDelivery
      SITECORE_APPSETTINGS_SXAXM:DEFINE: sxaxconnect
      SITECORE_APPSETTINGS_ENV:DEFINE: Docker
      SITECORE_APPSETTINGS_UNICORN:DEFINE: Disabled
      SITECORE_APPSETTINGS_PUBLISHINGSERVICE:DEFINE: Disabled
      SITECORE_APPSETTINGS_INTEGRATIONS:DEFINE: None
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    depends_on:
      ps:
        condition: service_started

  cm:
    healthcheck:
      test: ["CMD", "powershell", "ps"]
    image: ${REGISTRY}demo/lighthouse-cm:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    build:
      context: .
      dockerfile: .\docker\images\windows\demo-standalone\dockerfile
      args:
        BUILD_IMAGE: ${REGISTRY}demo/base/demo-build-sdk:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}
        BASE_IMAGE: ${REGISTRY}demo/base/lighthouse-xp1-modules-base-cm:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}
        ASSETS_IMAGE: scr.sitecore.com/tools/sitecore-docker-tools-assets:${SITECORE_VERSION}-${NANOSERVER_VERSION}
        INTERNAL_NUGET_SOURCE: ${INTERNAL_NUGET_SOURCE}
        SYSTEM_ACCESSTOKEN: ${SYSTEM_ACCESSTOKEN}
        OPENCALAIS_ACCESSTOKEN: ${OPENCALAIS_ACCESSTOKEN}
    mem_limit: 4G
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\license.xml
      SITECORE_APPSETTINGS_ROLE:DEFINE: ContentManagement
      SITECORE_APPSETTINGS_SXAXM:DEFINE: sxaxconnect
      SITECORE_APPSETTINGS_ENV:DEFINE: Docker
      SITECORE_APPSETTINGS_UNICORN:DEFINE: Enabled
      SITECORE_APPSETTINGS_PUBLISHINGSERVICE:DEFINE: Enabled
      SITECORE_APPSETTINGS_INTEGRATIONS:DEFINE: None
      SITECORE_APPSETTINGS_CONTENTHUB:DEFINE: Enabled
      SITECORE_CONNECTIONSTRINGS_CMP.ContentHub: ${CMP_CONTENTHUB}
      SITECORE_CONNECTIONSTRINGS_CMP.ServiceBusEntityPathIn: ${CMP_SERVICEBUSENTITYPATHIN}
      SITECORE_CONNECTIONSTRINGS_CMP.ServiceBusSubscription: ${CMP_SERVICEBUSSUBSCRIPTION}
      SITECORE_CONNECTIONSTRINGS_CMP.ServiceBusEntityPathOut: ${CMP_SERVICEBUSENTITYPATHOUT}
      SITECORE_CONNECTIONSTRINGS_SFMC: ${SFMC_CONNECTIONSTRING}
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    depends_on:
      ps:
        condition: service_started

  xdbsearch:
    image: ${REGISTRY}demo/lighthouse-xdbsearch:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\
    build:
      context: .
      dockerfile: .\docker\images\windows\demo-xconnect\dockerfile
      args:
        BUILD_IMAGE: mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-${WINDOWSSERVERCORE_VERSION}
        BASE_IMAGE: ${SITECORE_DOCKER_REGISTRY}sxp/sitecore-xp1-xdbsearch:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}
        INTERNAL_NUGET_SOURCE: ${INTERNAL_NUGET_SOURCE}
        SYSTEM_ACCESSTOKEN: ${SYSTEM_ACCESSTOKEN}

  xdbcollection:
    image: ${REGISTRY}demo/lighthouse-xdbcollection:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\
    build:
      context: .
      dockerfile: .\docker\images\windows\demo-xconnect\dockerfile
      args:
        BUILD_IMAGE: mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-ltsc2019
        BASE_IMAGE: ${SITECORE_DOCKER_REGISTRY}sxp/sitecore-xp1-xdbcollection:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}
        INTERNAL_NUGET_SOURCE: ${INTERNAL_NUGET_SOURCE}
        SYSTEM_ACCESSTOKEN: ${SYSTEM_ACCESSTOKEN}

  prc:
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\license.xml
      
  rep:
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\license.xml
      
  xdbautomation:
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\
    build:
      context: .
      dockerfile: .\docker\images\windows\demo-xconnect\dockerfile
      args:
        BUILD_IMAGE: mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-${WINDOWSSERVERCORE_VERSION}
        BASE_IMAGE: ${SITECORE_DOCKER_REGISTRY}sxp/sitecore-xp1-xdbautomation:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}
        INTERNAL_NUGET_SOURCE: ${INTERNAL_NUGET_SOURCE}
        SYSTEM_ACCESSTOKEN: ${SYSTEM_ACCESSTOKEN}

  xdbautomationrpt:
    volumes:
      - ${HOST_LICENSE_FOLDER}:c:\license
    environment:
      SITECORE_LICENSE_LOCATION: c:\license\
    build:
      context: .
      dockerfile: .\docker\images\windows\demo-xconnect\dockerfile
      args:
        BUILD_IMAGE: mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-${WINDOWSSERVERCORE_VERSION}
        BASE_IMAGE: ${SITECORE_DOCKER_REGISTRY}sxp/sitecore-xp1-xdbautomationrpt:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}
        INTERNAL_NUGET_SOURCE: ${INTERNAL_NUGET_SOURCE}
        SYSTEM_ACCESSTOKEN: ${SYSTEM_ACCESSTOKEN}

  smtp:
    image: maildev/maildev
    command: ["--smtp", "25", "--web", "80"]
    isolation: ${ISOLATION}
    ports:
      - "44025:25"
      - "44026:80"

  init:
    healthcheck:
      test: ["CMD", "powershell", "ps"]
    image: ${REGISTRY}demo/lighthouse-init:${SITECORE_VERSION}-${WINDOWSSERVERCORE_VERSION}-${DEMO_VERSION}
    isolation: ${ISOLATION}
    build:
      context: .\docker\images\windows\demo-init
      args:
        BUILD_IMAGE: mcr.microsoft.com/dotnet/core/sdk:3.1-nanoserver-${NANOSERVER_VERSION}
        BASE_IMAGE: mcr.microsoft.com/dotnet/core/runtime:3.1-nanoserver-${NANOSERVER_VERSION}
    environment:
      ADMIN_PASSWORD: ${SITECORE_ADMIN_PASSWORD}
      ADMIN_USER_NAME: "admin"
      HOST_CD: "http://cd"
      HOST_CM: "http://cm"
      HOST_PS: "http://ps"
      HOST_ID: "http://id"
      MARKETING_DEFINITIONS_APIKEY: ${MARKETING_DEFINITIONS_APIKEY}
    depends_on:
      mssql:
        condition: service_healthy
      ps:
        condition: service_started
      cm:
        condition: service_started

  monitor:
    image: ${REGISTRY}community/sitecore-hostswriter:9174-nanoserver-${NANOSERVER_VERSION}
    isolation: ${ISOLATION}
    volumes:
      - C:/windows/system32/drivers/etc:C:\driversetc
      - source: '\\.\pipe\docker_engine'
        target: '\\.\pipe\docker_engine'
        type: npipe
